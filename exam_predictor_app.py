import streamlit as st
import pandas as pd
import numpy as np
from xgboost import XGBClassifier
from sklearn.preprocessing import StandardScaler
import joblib

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Å–∫–µ–π–ª–µ—Ä–∞
model = joblib.load("xgb_model.pkl")
scaler = joblib.load("scaler.pkl")

st.title("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: —Å–¥–∞—Å—Ç –ª–∏ –í–ª–∞–¥ —ç–∫–∑–∞–º–µ–Ω?")

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.header("üîé –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è_1 = st.sidebar.slider("–û—Ü–µ–Ω–∫–∞ –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é 1", 0, 10, 7)
–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è_2 = st.sidebar.slider("–û—Ü–µ–Ω–∫–∞ –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é 2", 0, 10, 7)
–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è_3 = st.sidebar.slider("–û—Ü–µ–Ω–∫–∞ –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é 3", 0, 10, 7)
–°–æ–Ω = st.sidebar.selectbox("–°–æ–Ω –Ω–∞–∫–∞–Ω—É–Ω–µ", ["–•–æ—Ä–æ—à–∏–π", "–ü–ª–æ—Ö–æ–π"])
–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ = st.sidebar.selectbox("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", ["–•–æ—Ä–æ—à–µ–µ", "–ü–ª–æ—Ö–æ–µ"])
–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ = st.sidebar.selectbox("–ü–∏–ª —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –Ω–∞–∫–∞–Ω—É–Ω–µ?", ["–î–∞", "–ù–µ—Ç"])
–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å = st.sidebar.slider("–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π (%)", 0, 100, 80)
–í—Ä–µ–º—è_–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ = st.sidebar.slider("–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ (—á–∞—Å—ã)", 0, 20, 5)

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    input_dict = {
        "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 1": –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è_1,
        "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2": –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è_2,
        "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 3": –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è_3,
        "–°–æ–Ω –Ω–∞–∫–∞–Ω—É–Ω–µ": 1 if –°–æ–Ω == "–•–æ—Ä–æ—à–∏–π" else 0,
        "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ": 1 if –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ == "–•–æ—Ä–æ—à–µ–µ" else 0,
        "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤ –Ω–∞–∫–∞–Ω—É–Ω–µ": 1 if –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ == "–î–∞" else 0,
        "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π": –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å,
        "–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏": –í—Ä–µ–º—è_–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏,
    }

    df_input = pd.DataFrame([input_dict])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    df_input["–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª"] = df_input[["–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 1", "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2", "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 3"]].mean(axis=1)
    df_input["–°—É–º–º–∞ –±–∞–ª–ª–æ–≤"] = df_input[["–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 1", "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2", "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 3"]].sum(axis=1)
    df_input["–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"] = df_input["–°—É–º–º–∞ –±–∞–ª–ª–æ–≤"] / (df_input["–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"] + 1)

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    expected_features = [
        "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 1",
        "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2",
        "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 3",
        "–°–æ–Ω –Ω–∞–∫–∞–Ω—É–Ω–µ",
        "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
        "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤ –Ω–∞–∫–∞–Ω—É–Ω–µ",
        "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π",
        "–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏",
        "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª",
        "–°—É–º–º–∞ –±–∞–ª–ª–æ–≤",
        "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"
    ]

    scaled_input = scaler.transform(df_input[expected_features])

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    pred_prob = model.predict_proba(scaled_input)[0][1]
    pred = model.predict(scaled_input)[0]

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("üìä –ò—Ç–æ–≥–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    if pred:
        st.success(f"‚úÖ –í–ª–∞–¥ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–¥–∞—Å—Ç —ç–∫–∑–∞–º–µ–Ω! –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: **{pred_prob:.2%}**")
    else:
        st.error(f"‚ùå –í–ª–∞–¥, —É–≤—ã, —Å–∫–æ—Ä–µ–µ –Ω–µ —Å–¥–∞—Å—Ç. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: **{1 - pred_prob:.2%}**")

    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìâ –ê–Ω–∞–ª–∏–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    st.dataframe(df_input)

    st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    st.metric(label="–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", value=f"{df_input['–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª'].values[0]:.2f}")
    st.metric(label="–°—É–º–º–∞ –±–∞–ª–ª–æ–≤", value=f"{df_input['–°—É–º–º–∞ –±–∞–ª–ª–æ–≤'].values[0]:.2f}")
    st.metric(label="–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏", value=f"{df_input['–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏'].values[0]:.2f}")